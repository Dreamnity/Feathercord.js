var apiSpec;const{EventEmitter:t}=require("events"),{join:e}=require("path"),{get:s,request:i}=require("https"),{WebSocket:ws}=require("ws"),{version:o}=require("./package.json"),APIs={https:"https://discord.com/api/",httpheader:t=>({Authorization:"Bot "+t,"User-Agent":"DiscordBot (https://github.com/Dreamnity/styrofoam.js, "+o+")","Content-Type":"application/json"}),spec:"https://raw.githubusercontent.com/discord/discord-api-spec/main/specs/openapi_preview.json"};class Styrofoam extends t{constructor(t){super("Endpoints"),this.options=t,this.#a(t),this.#b=download(APIs.spec).then(t=>apiSpec=JSON.parse(t)).then(()=>{if(!apiSpec?.openapi)throw Error("Error downloading the API specification: No content");this.interact=createInteract([],t.login.token),Object.keys(apiSpec.paths).forEach(t=>{let e=t.match(/\/([a-z0-9]+).*/)[1];e in this||(this[e]=this.interact[e])})}).catch(t=>{let e=Error("Error downloading the API specification: "+t.message);throw e.stack=t.stack,e}),download(e(APIs.https,"gateway")).then(t=>{APIs.gateway=JSON.parse(t).url,this.login()})}#a(n){if(!n?.login?.token)throw ReferenceError("Token is not provided! (options.login.token)");this.#c=n.login.token}#b;session={};#c="";#d=0;#e=0;ping=0;#f=0;#g=!0;cache={guilds:[]};interact;options={};login(e){let{gateway:s,customLogin:i}=e||{};this.socket&&this.socket.close(),this.socket=new ws(s||APIs.gateway).on("message",t=>{let e=this.socket,s=JSON.parse(t),o;switch(this.emit("gatewayDebug",s),s.op){case 10:return this.#d=s.d.heartbeat_interval,e.send(JSON.stringify(i||{op:2,d:{properties:{os:process.platform,browser:"styrofoam.js",device:process.arch},intents:513,...this.options.login}})),(o=()=>{let t=setTimeout(()=>{0!=this.#d&&(this.#g?(this.emit("ping"),this.#g=!1,o(),this.#e=Date.now(),e.send(JSON.stringify({op:1,d:this.#f}))):(e.close(),this.emit("close","Timed out!"),this.#d=0))},this.#d),s=()=>clearTimeout(t);this.removeListener("close",s),this.on("close",s)})();case 11:return this.#g=!0,this.ping=Date.now()-this.#e,this.emit("pong");case 1:s.d&&(this.session=s.d);case 0:if("GUILD_CREATE"===s.t&&0==this.ping)return this.cache.guilds.push(s.d);if("READY"===s.t)return this.#b.finally(()=>this.emit("ready",s.d));return this.emit(toCamelCase(s.t.replace(/_/g," ")),s.d);case 7:case 9:this.emit("disconnected",s.d),s.d||7==s.op?this.login({customLogin:{op:6,d:{token:this.#c,session_id:this.session.session_id,seq:this.#f}},gateway:this.session.resume_gateway_url}):(this.emit("error",Error("Gateway issued disconnection without resume")),this.emit("close","Connection closed by gateway!"),this.destroy())}this.#f=s.s||this.#f});let o=setInterval(()=>{},1e5);this.on("close",()=>clearInterval(o)),this.socket.on("close",t=>{1005!=t&&(this.emit("close",t),this.#d=0)}),this.socket.on("error",t=>{throw Error("Discord gateway socket error: "+t.message)}),this.#h=t.destroy}destroy(){try{return this.socket.close(),this.#h(),this.#d=0,!0}catch{return!1}}setPresence(t){return this.#i.activity=t,this.#j({op:3,d:{since:null,activities:[t],status:this.#i.status,afk:!1}})}#j(r){return new Promise((t,e)=>this.socket.send("string"==typeof r?r:JSON.stringify(r),s=>s?e(s):t()))}setStatus(t){let e=["online","dnd","idle","invisible","offline"];if(!e.includes(t))throw TypeError("Status must be one of "+e.join(", "));return this.#i.status=t,this.#j({op:3,d:{since:null,activities:[this.#i.activity],status:t,afk:!1}})}#i={status:"online",activity:{}};#h;socket}function download(t,e={}){return new Promise((i,o)=>s(t,e,function(t){var e=[];t.on("data",function(t){e.push(t)}).on("end",function(){i(Buffer.concat(e))}).on("error",o)}).on("error",o))}function toCamelCase(t){return t.split(" ").map(function(t,e){return 0==e?t.toLowerCase():t.charAt(0).toUpperCase()+t.slice(1).toLowerCase()}).join("")}const methods={get:"GET",create:"POST",post:"POST",delete:"DELETE"};function parse(t,e={}){try{let s=methods[t[t.length-1].toLowerCase()];s&&(t=t.slice(0,-1));let i="/"+t.map(t=>Number.isNaN(parseInt(t))&&!t.match(/\{[a-z_]+\}/g)?t:"variable").join("/"),o=Object.keys(apiSpec.paths).find(t=>t.replace(/\/\{[a-z_]+\}/g,"/variable").endsWith(i))||Object.keys(apiSpec.paths).find(t=>t.replace(/\/\{[a-z_]+\}/g,"").endsWith(i));if(!o)return;let n=o.split("/").filter(t=>""!=t);i.split("/").filter(t=>""!=t).forEach((e,s)=>{"variable"===e&&parseInt(t[s])&&(n[s]=t[s])});let r=o;return o="/"+n.join("/"),{method:s||Object.keys(apiSpec.paths[r]).find(t=>!!apiSpec?.paths[r][t]?.operationId).toUpperCase(),url:o.split("/").map(t=>e[t.match(/{(?<i>[a-zA-Z0-9_]+)}/)?.groups?.i]||t).join("/")}}catch{return}}function createInteract(t=[],e){let s=t.join("/");return new Proxy(function o(n){let r=parse(t,n);if(!r)throw Error("Endpoint not found (trying to search for "+s+")");return new Promise(function(t,s){i(new URL("/api"+r.url,APIs.https),{headers:APIs.httpheader(e),method:r.method||"POST"},e=>{var i="";e.on("data",t=>i+=t),e.on("end",()=>{i.match(/^[\[\{]/g)||s("DiscordAPIError: Server didn't respond in JSON:\n"+i);let o=JSON.parse(i);if(!e.statusCode.toString().startsWith("2")&&o.message){let n=Error(o.message);return n.name="DiscordAPIError",n.code=o.code,s(n)}t(o)}).on("error",s)}).end(JSON.stringify(n)).on("error",s)})},{get:(s,i)=>createInteract(t.concat(...i.split(/[./]/)),e)})}module.exports=Styrofoam;